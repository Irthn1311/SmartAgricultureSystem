import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import joblib
import pandas as pd
from datetime import datetime, timedelta

def preprocess_data(df):
    # Chuy·ªÉn ƒë·ªïi RainToday
    df['RainToday'] = df['RainToday'].map({'Yes': 1, 'No': 0})
    
    # X·ª≠ l√Ω missing values
    df.dropna(inplace=True)
    
    # Ch·ªçn features
    features = ['MinTemp', 'MaxTemp', 'Humidity', 'Cloud', 'Temp', 'RainToday']
    
    return df[features]

try:
    # Load scaler v√† model
    scaler = joblib.load("scaler.save")
    model = load_model("weather_model.keras")
    
    # Load v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
    df = pd.read_csv("Weather_Data.csv")
    features = preprocess_data(df)
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaled_features = scaler.transform(features)
    
    # L·∫•y 3 ng√†y cu·ªëi c√πng
    X_input = scaled_features[-3:]
    X_input = X_input.reshape((1, 3, 6))
    
    # D·ª± ƒëo√°n
    predictions = model.predict(X_input)[0]
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\nüå§Ô∏è D·ª± ƒëo√°n th·ªùi ti·∫øt cho 3 ng√†y t·ªõi:")
    print("=" * 50)
    
    for i, day in enumerate(predictions):
        # T√≠nh ng√†y
        current_date = datetime.now() + timedelta(days=i+1)
        date_str = current_date.strftime("%d/%m/%Y")
        
        # L·∫•y x√°c su·∫•t
        prob_rain = day[1] * 100
        prob_no_rain = day[0] * 100
        
        # Quy·∫øt ƒë·ªãnh
        will_rain = np.argmax(day) == 1
        
        print(f"\nüìÖ Ng√†y {date_str}:")
        print(f"   - X√°c su·∫•t m∆∞a: {prob_rain:.1f}%")
        print(f"   - X√°c su·∫•t kh√¥ng m∆∞a: {prob_no_rain:.1f}%")
        print(f"   - D·ª± ƒëo√°n: {'C√≥ m∆∞a' if will_rain else 'Kh√¥ng m∆∞a'}")
    
except FileNotFoundError as e:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file {str(e)}")
except Exception as e:
    print(f"‚ùå L·ªói: {str(e)}")
